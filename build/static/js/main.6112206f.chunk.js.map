{"version":3,"sources":["contexts/AuthContext.js","components/Signup.js","components/Dashboard2.js","components/Login.js","App.js","index.js"],"names":["AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","username","password","firstname","lastname","email","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","value","login","signup","Provider","Signup","usernameRef","useRef","passwordRef","firstnameRef","lastnameRef","emailRef","error","setError","success","setSuccess","e","preventDefault","current","console","log","id","Card","Body","className","Alert","variant","Form","onSubmit","Group","Label","Control","type","ref","required","Button","to","Dashboard2","navigate","logout","useNavigate","onClick","Login","props","details","App","Container","style","minHeight","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6112206f.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\"\n\nconst AuthContext = React.createContext()\n\nexport function useAuth() {\n  return useContext(AuthContext)\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState()\n\n  async function signup(username, password, firstname, lastname, email) {\n    const url = 'https://cap.gura.ch/api/user/register'\n\n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify({\"username\": username, \"password\": password, \"firstname\": firstname, \"lastname\": lastname, \"email\": email}) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n\n\n  async function login(email, password) {\n    const url = 'https://cap.gura.ch/api/user/login'\n\n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify({\"username\": email, \"password\": password}) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n\n\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","import React, { useRef, useState } from 'react'\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\nimport {Link, useNavigate} from \"react-router-dom\"\nimport { useAuth } from \"../contexts/AuthContext\"\n\nexport default function Signup() {\n    const usernameRef = useRef()\n    const passwordRef = useRef()\n    const firstnameRef = useRef()\n    const lastnameRef = useRef()\n    const emailRef = useRef()\n    const { signup } = useAuth()\n    const [error, setError] = useState(\"\")\n    const [success, setSuccess] = useState(\"\")\n    //const history = useNavigate()\n\n    async function handleSubmit(e) {\n        e.preventDefault()\n\n        try {\n        setError(\"\")\n        setSuccess(\"\")\n        const response = await signup(usernameRef.current.value, passwordRef.current.value, firstnameRef.current.value, lastnameRef.current.value, emailRef.current.value)\n        //history.push(\"/\")\n        console.log(response)\n        if(response.id){\n            setSuccess(\"Account successfully created\")     \n        }else if(response.password){\n            setError(\"Weak password\")\n        } else if(response.username) {\n            setError(\"Username already exists\")\n        } else if(response.email){\n            setError(\"Email already been used\") \n        } \n        } catch {\n            setError(\"Failed to create an account\")\n        }\n    }\n    return (\n        <>\n       \n        <Card> \n            <Card.Body>\n                <h2 className = 'text-center mb-4'>Sign up</h2>\n                {error && <Alert variant=\"danger\">{error}</Alert>}\n                {success && <Alert variant=\"success\">{success}</Alert>}\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group id =\"username\">\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control type = \"username\" ref = {usernameRef} required />\n\n                    </Form.Group>\n                    <Form.Group id =\"first-name\">\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control type = \"firstname\" ref = {firstnameRef} required />\n                    </Form.Group>\n                    <Form.Group id =\"last-name\">\n                        <Form.Label>Last Name</Form.Label>\n                        <Form.Control type = \"lastname\" ref = {lastnameRef} required />\n                    </Form.Group>\n                    <Form.Group id =\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type = \"email\" ref = {emailRef} required />\n                    </Form.Group>\n                    <Form.Group id =\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type = \"password\" ref = {passwordRef} required />\n                    </Form.Group>\n                    <Button className = \"w-100 text\" type = \"submit\">Sign Up</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n\n        <div className = \"w-100 text-center mt-2\">\n            Already have an account? <Link to = \"/\">Log in</Link>\n        </div>\n        </>\n    )\n}","import React, { useState } from \"react\"\nimport { Card, Button, Alert } from \"react-bootstrap\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { Link, useNavigate } from \"react-router-dom\"\n\nexport default function Dashboard2() {\n  const [error, setError] = useState(\"\")\n  const { currentUser, logout } = useAuth()\n  const navigate = useNavigate();\n\n  async function handleLogout() {\n    setError(\"\")\n\n    try {\n      navigate(\"/\")\n    } catch {\n      setError(\"Failed to log out\")\n    }\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Profile</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Link to=\"/login\" className=\"btn btn-primary w-100 mt-3\">\n            Add Tracker\n          </Link>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Button variant=\"link\" onClick={handleLogout}>\n          Log Out\n        </Button>\n      </div>\n    </>\n  )\n}","// src/Login.js \nimport React, { useRef, useState } from \"react\"\nimport { Form, Button, Card, Alert } from \"react-bootstrap\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { Link, useNavigate } from \"react-router-dom\"\n\nconst Login = (props) => {\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const navigate = useNavigate();\n    const { login } = useAuth()\n    const [error, setError] = useState(\"\")\n    //const history = useNavigate()\n\n    async function handleSubmit(e) {\n        e.preventDefault()\n\n        try {\n        setError(\"\")\n        const response = await login(emailRef.current.value, passwordRef.current.value)\n        console.log(response)\n        if(response.details == \"Invalid username/password\"){\n            setError(\"Invalid username/password\")\n        } else {\n            navigate(\"/dashboard\")\n        }\n        } catch {\n        setError(\"Failed to log in\")\n        }\n    }\n\n    return (\n        <>\n      \n        <Card> \n            <Card.Body>\n                <h2 className = 'text-center mb-4'>Log in</h2>\n                {error && <Alert variant=\"danger\">{error}</Alert>}\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group id =\"username\">\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control type = \"username\" ref={emailRef} required />\n\n                    </Form.Group>\n                    <Form.Group id =\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type = \"password\" ref={passwordRef} required/>\n                    </Form.Group>\n                    \n                    <Button className=\"w-100\" type=\"submit\">\n                        Log In\n                    </Button>\n    \n                </Form>\n            </Card.Body>\n        </Card>\n\n        <div className = \"w-100 text-center mt-2\">\n            Need an account? <Link to = \"/signup\">Sign Up</Link>\n        </div>\n\n        <Card>\n            <Card.Body>\n                <h3 className= 'text-center mb-4'>Health Care Provider Key</h3>\n                <Form>\n                    <Form.Group id = \"key\">\n                        <Form.Label>Key</Form.Label>\n                        <Form.Control type = \"key\"/>\n                    </Form.Group>\n                    <Button onClick = {() => navigate(\"/dashboard\")} className = \"w-100 text\" >Log in</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n        </>\n        \n    );\n\n};\nexport default Login;","import React from \"react\"\nimport Signup from \"./components/Signup\";\nimport { Container } from 'react-bootstrap'\n//import {BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport {BrowserRouter as Router, Routes, Route} from \"react-router-dom\"\nimport Dashboard from \"./components/Dashboard2\";\nimport Login from \"./components/Login\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\n// import ErrorPage from \"./Pages/ErrorPage\";\n\n\nconst  App = () => {\n  return (\n    <AuthProvider>\n      <Container className = \"d-flex algin-items-center justify-content-center\" \n    style = {{minHeight: \"100vh\"}}\n    >\n      <div >\n        <Router> \n          <Routes>\n\n            <Route path = \"/signup\" element = {<Signup />}/>\n            <Route path = \"/\" element = {<Login />}/>\n            <Route path = \"/dashboard\" element = {<Dashboard />}/>\n            {/* <Route path = \"*\" element = {<ErrorPage />}/> */}\n          </Routes>\n        </Router> \n        \n      </div>\n      \n    </Container>\n\n    </AuthProvider>\n   \n  );\n    \n};\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals()"],"sourceRoot":""}